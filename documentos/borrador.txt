A la hora de hacer un videojuego, los motores de desarrollo de videojuegos mas famosos son Quake, Unreal Engine, Unity y Godot. Ante estas opciones, mi elección ha sido Godot. Godot se caracteriza por su sistema de escenas y nodos, que permite estructurar el videojuego de manera modular y escalable.

Para un proyecto como este resulta especialmente útil, ya que es muy fácil dividir las dos áreas que se abordarán en él: el diseño y desarrollo de un videojuego y la implementación de una inteligencia artificial. Este planteamiento favorece un desarrollo iterativo e incremental [Larman2003], ya que es posible añadir y modificar funcionalidades progresivamente sin necesidad de reestructurar el proyecto completo. Además, Godot divide la creación del videojuego en subsistemas independientes, incluyendo audio, animación, input, físicas, renderizado, etc, que son implementados de forma paralela e independiente [Gregory2019].

A pesar de todo, una estructura que dependa de escenas y árboles no tiene forma de almacenar información global que deba compartirse entre distintas escenas, sin tener que recurrir a soluciones provisionales, como una escena "maestra", que implicaría no poder ejecutar las escenas hijas individualmente. Para solucionar esto, Godot incorpora el Patrón Singleton (instancia única), ampliamente utilizado en ingeniería del software [Gamma1994], que permite gestionar variables globales, mantener objetos persistentes en memoria, reutilizar escenas y facilitar la transición entre ellas. (https://docs.godotengine.org/es/4.x/tutorials/scripting/singletons_autoload.html)

En conjunto, estas características hacen de Godot una herramienta idónea para garantizar un desarrollo ágil, estructurado y sostenible.